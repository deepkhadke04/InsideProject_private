import React, { useReducer, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom'; // Import useNavigate

const UserRegistration = () => {
    const navigate = useNavigate(); // Initialize useNavigate

    const init = {
        fname: '',
        lname: '',
        address: '',
        contact: '',
        password: '',
        areaId: 1,
        email: '',
        status: false,
        roleId: 1
    };

    const reducer = (state, action) => {
        switch (action.type) {
            case 'update':
                return { ...state, [action.fld]: action.val };
            case 'reset':
                return init;
            default:
                return state;
        }
    };

    const [info, dispatch] = useReducer(reducer, init);
    const [areas, setAreas] = useState([]);
    const [errors, setErrors] = useState({});
    const [emailExists, setEmailExists] = useState(false);

    useEffect(() => {
        fetch('https://localhost:7003/api/UserManagement/GetArea')
            .then(response => response.json())
            .then(data => setAreas(data))
            .catch(error => console.error('Error fetching areas:', error));
    }, []);

    const validateForm = () => {
        const newErrors = {};
        // Validate address
        if (!info.address.trim()) {
            newErrors.address = 'Address is required.';
        }

        // Validate first name
        if (info.fname.trim() && !/^[A-Z]/.test(info.fname.trim())) {
            newErrors.fname = 'First name must start with a capital letter.';
        }

        // Validate last name
        if (info.lname.trim() && !/^[A-Z]/.test(info.lname.trim())) {
            newErrors.lname = 'Last name must start with a capital letter.';
        }

        // Validate contact number
        if (!/^\d{10}$/.test(info.contact)) {
            newErrors.contact = 'Contact number must be exactly 10 digits.';
        }

        // Validate password
        const password = info.password;
        if (!/(?=.[A-Z])(?=.\d)(?=.[@$!%?&])[A-Za-z\d@$!%*?&]{8,}/.test(password)) {
            newErrors.password = 'Password must be at least 8 characters long, include one uppercase letter, one special character, and one digit.';
        }

        // Validate email
        if (!/\S+@\S+\.\S+/.test(info.email)) {
            newErrors.email = 'Email is invalid.';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const checkEmailExistence = async () => {
        if (!info.email.trim()) return; // Skip check if email is empty
        try {
            const response = await fetch(https://localhost:7003/api/UserManagement/CheckEmailExists/${info.email});
            if (!response.ok) {
                throw new Error('Error checking email.');
            }
            const result = await response.json();
            setEmailExists(result === "Email already exists.");
            if (result === "Email already exists.") {
                setErrors(prevErrors => ({ ...prevErrors, email: 'Email already exists.' }));
            } else {
                setErrors(prevErrors => {
                    const { email, ...rest } = prevErrors;
                    return rest;
                });
            }
        } catch (error) {
            console.error('Error checking email existence:', error);
            if (error.message === 'Failed to fetch') {
                alert('Network error: Please check your connection.');
            }
        }
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!validateForm() || emailExists) {
            return; // If validation fails or email exists, do not submit
        }

        const senddata = {
            fname: info.fname,
            lname: info.lname,
            email: info.email,
            contact: info.contact,
            password: info.password,
            areaId: info.areaId,
            address: info.address,
            status: true,
            roleId: info.roleId
        };

        const reqdata = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(senddata)
        };

        fetch("https://localhost:7003/api/UserManagement/SaveUser", reqdata)
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => {
                        if (response.status === 409) { // Conflict error for email already exists
                            setErrors(prevErrors => ({ ...prevErrors, email: 'Email already exists.' }));
                        } else {
                            throw new Error(error.message || 'An error occurred.');
                        }
                    });
                }
                return response.json();
            })
            .then(data => {

                

                console.log('Success:', data);
                dispatch({ type: 'reset' }); // Optionally reset the form
                navigate('/login'); // Redirect to login page
            })
            .catch(error => {
                if (error.message === 'Failed to fetch') {
                    alert('Network error: Please check your connection.');
                } else {
                    alert('Registration failed: ' + error.message);
                }
                console.error('Error:', error);
            });
    };

    return (
        <div className="container mt-5">
            <div className="row justify-content-center">
                <div className="col-md-8">
                    <div className="card">
                        <div className="card-body">
                            <h2 className="card-title text-center mb-4">User Registration</h2>

                            <form onSubmit={handleSubmit}>
                                <div className="mb-3">
                                    <label htmlFor="fname" className="form-label">First Name</label>
                                    <input
                                        type="text"
                                        id="fname"
                                        name="fname"
                                        className="form-control"
                                        value={info.fname}
                                        onChange={(e) => {
                                            const value = e.target.value;
                                            dispatch({ type: 'update', fld: 'fname', val: value });
                                            if (value.length === 1 && /[a-z]/.test(value)) {
                                                dispatch({ type: 'update', fld: 'fname', val: value.toUpperCase() });
                                            }
                                        }}
                                    />
                                    {errors.fname && <div className="text-danger">{errors.fname}</div>}
                                </div>
                                <div className="mb-3">
                                    <label htmlFor="lname" className="form-label">Last Name</label>
                                    <input
                                        type="text"
                                        id="lname"
                                        name="lname"
                                        className="form-control"
                                        value={info.lname}
                                        onChange={(e) => {
                                            const value = e.target.value;
                                            dispatch({ type: 'update', fld: 'lname', val: value });
                                            if (value.length === 1 && /[a-z]/.test(value)) {
                                                dispatch({ type: 'update', fld: 'lname', val: value.toUpperCase() });
                                            }
                                        }}
                                    />
                                    {errors.lname && <div className="text-danger">{errors.lname}</div>}
                                </div>
                                <div className="mb-3">
                                    <label htmlFor="address" className="form-label">Address</label>
                                    <textarea
                                        id="address"
                                        name="address"
                                        className="form-control"
                                        rows="3"
                                        value={info.address}
                                        onChange={(e) => dispatch({ type: 'update', fld: 'address', val: e.target.value })}
                                    />
                                    {errors.address && <div className="text-danger">{errors.address}</div>}
                                </div>
                                
                                <div className="mb-3">
                                    <label htmlFor="contact" className="form-label">Contact Number</label>
                                    <input
                                        type="tel"
                                        id="contact"
                                        name="contact"
                                        className="form-control"
                                        value={info.contact}
                                        onChange={(e) => dispatch({ type: 'update', fld: 'contact', val: e.target.value })}
                                    />
                                    {errors.contact && <div className="text-danger">{errors.contact}</div>}
                                </div>
                                <div className="mb-3">
                                    <label htmlFor="email" className="form-label">Email</label>
                                    <input
                                        type="email"
                                        id="email"
                                        name="email"
                                        className="form-control"
                                        value={info.email}
                                        onBlur={checkEmailExistence}
                                        onChange={(e) => {
                                            dispatch({ type: 'update', fld: 'email', val: e.target.value });
                                            if (emailExists) {
                                                setEmailExists(false); // Reset email existence check on change
                                            }
                                        }}
                                    />
                                    {errors.email && !emailExists && <div className="text-danger">{errors.email}</div>}
                                    {emailExists && <div className="text-danger">Email already exists.</div>}
                                </div>

                                <div className="mb-3">
                                    <label htmlFor="password" className="form-label">Password</label>
                                    <input
                                        type="password"
                                        id="password"
                                        name="password"
                                        className="form-control"
                                        value={info.password}
                                        onChange={(e) => dispatch({ type: 'update', fld: 'password', val: e.target.value })}
                                    />
                                    {errors.password && <div className="text-danger">{errors.password}</div>}
                                </div>

                                <div className="mb-3">
                                    <label htmlFor="areaId" className="form-label">Area</label>
                                    <select
                                        id="areaId"
                                        name="areaId"
                                        className="form-control"
                                        value={info.areaId}
                                        onChange={(e) => dispatch({ type: 'update', fld: 'areaId', val: parseInt(e.target.value, 10) })}
                                    >
                                        {areas.map(area => (
                                            <option key={area.areaId} value={area.areaId}>
                                                {area.areaDesc}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <button type="submit" className="btn btn-primary">Register</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default UserRegistration;